# Claude Code Provider Balancer Configuration
# 支持多个Claude Code服务商和OpenAI兼容服务商
#
# Streaming Mode Options:
# - auto: Based on provider type (anthropic=direct, openai=background) [default]
# - direct: Direct provider streaming without background collection (lower latency)
# - background: Background collection then streaming to client (supports failover, caching)

providers:
  # Claude Code 官方授权 (Claude Console API)
  - name: "Claude Code Official"
    type: "anthropic"
    base_url: "https://api.anthropic.com"
    auth_type: "auth_token"
    auth_value: "passthrough"
    proxy: "http://127.0.0.1:10808"
    enabled: false

  # 使用auth_token的Claude Code服务商示例
  - name: "GAC"
    type: "anthropic"
    base_url: "https://gaccode.com/claudecode"
    auth_type: "api_key"
    auth_value: ""
    enabled: true

  - name: "AICODE"
    type: "anthropic"
    base_url: "https://api.aicodemirror.com/api/claudecode"
    auth_type: "api_key"
    auth_value: ""
    enabled: true

  # 另一个Claude Code服务商示例
  - name: "AnyRouter"
    type: "anthropic"
    base_url: "https://anyrouter.top"
    auth_type: "auth_token"
    auth_value: ""
    enabled: false

  # 另一个Claude Code服务商示例
  - name: "YourAPI"
    type: "anthropic"
    base_url: "https://yourapi.cn"
    auth_type: "auth_token"
    auth_value: ""
    enabled: true

  # WenWen AI作为Claude Code服务商
  - name: "WenWen"
    type: "anthropic"
    base_url: "https://code.wenwen-ai.com"
    auth_type: "auth_token"
    auth_value: ""
    enabled: true

  # OpenRouter作为OpenAI兼容服务商
  - name: "OpenRouter"
    type: "openai"
    base_url: "https://openrouter.ai/api/v1"
    auth_type: "api_key"
    auth_value: ""
    enabled: true

# 简化的模型路由配置
model_routes:
  # 大模型路由
  "*sonnet*":
    - provider: "GAC"
      model: "passthrough"
      priority: 1
    - provider: "Claude Code Official"
      model: "passthrough"
      priority: 2
    - provider: "AICODE"
      model: "passthrough"
      priority: 3
    - provider: "AnyRouter"
      model: "passthrough"
      priority: 4
    - provider: "YourAPI"
      model: "passthrough"
      priority: 5
    - provider: "WenWen"
      model: "passthrough"
      priority: 6
    - provider: "OpenRouter"
      model: "google/gemini-2.5-pro"
      priority: 7

  "*opus*":
    - provider: "GAC"
      model: "passthrough"
      priority: 1
    - provider: "Claude Code Official"
      model: "passthrough"
      priority: 2
    - provider: "AICODE"
      model: "passthrough"
      priority: 3
    - provider: "AnyRouter"
      model: "passthrough"
      priority: 4
    - provider: "YourAPI"
      model: "passthrough"
      priority: 5
    - provider: "WenWen"
      model: "passthrough"
      priority: 6
    - provider: "OpenRouter"
      model: "google/gemini-2.5-pro"
      priority: 7

  # 小模型路由
  "*haiku*":
    - provider: "GAC"
      model: "passthrough"
      priority: 1
    - provider: "AICODE"
      model: "passthrough"
      priority: 2
    - provider: "AnyRouter"
      model: "passthrough"
      priority: 3
    - provider: "YourAPI"
      model: "passthrough"
      priority: 4
    - provider: "WenWen"
      model: "passthrough"
      priority: 5
    - provider: "Claude Code Official"
      model: "passthrough"
      priority: 6
    - provider: "OpenRouter"
      model: "anthropic/claude-3.5-haiku"
      priority: 7

# 全局设置
settings:
  # 模型选择策略
  selection_strategy: "priority"  # priority | round_robin | random

  # 故障服务商的冷却时间（秒）
  failure_cooldown: 300

  # Provider健康状态配置
  # 错误次数达到阈值后才标记为unhealthy
  unhealthy_threshold: 2  # 默认2次错误才标记unhealthy
  # 成功请求后是否重置错误计数
  unhealthy_reset_on_success: true
  # 错误计数自动重置时间（秒）- 超过此时间未出错则重置计数
  unhealthy_reset_timeout: 300  # 5分钟

  # 开发模式自动重载 (监听 .py 和 .yaml 文件变化自动重启)
  reload: true
  reload_includes: ["*.py", "config.yaml"]  # 监听的文件类型

  # 超时配置统一管理
  timeouts:
    # 非流式请求超时配置
    non_streaming:
      # 连接建立超时（秒）
      connect_timeout: 30
      # 数据读取超时（秒）- 非流式请求超时较短
      read_timeout: 120
      # 连接池超时（秒）
      pool_timeout: 30

    # 流式请求超时配置
    streaming:
      # 连接建立超时（秒）
      connect_timeout: 30
      # 数据读取超时（秒）- 流式请求超时较长
      read_timeout: 120
      # 连接池超时（秒）
      pool_timeout: 30

    # 缓存相关超时配置
    caching:
      # 请求去重等待超时（秒）
      deduplication_timeout: 180

  # 智能恢复设置
  sticky_provider_duration: 300  # 粘滞provider持续时间（秒），成功后多长时间内优先使用该provider（默认5分钟）

  # 错误处理策略
  # 只有在以下错误类型时才会尝试failover到其他provider
  # 其他错误类型会直接返回给客户端
  failover_error_types:
    # === 网络连接错误 ===
    # 连接建立阶段的错误
    - "connection_error"          # 通用连接失败
    - "ssl_error"                # SSL/TLS握手失败
    - "network_unreachable"      # 网络不可达

    # === 网络超时错误 ===
    # 各种超时相关错误
    - "connect_timeout"          # 连接建立超时
    - "read_timeout"            # 数据读取超时
    - "gateway_timeout"         # 网关超时(504)
    - "pool_timeout"            # 连接池获取超时

    # === HTTP服务器错误 ===
    # 5xx系列服务器内部错误
    - "internal_server_error"    # 500 内部服务器错误
    - "bad_gateway"             # 502 网关错误
    - "service_unavailable"     # 503 服务不可用

    # === 流量控制错误 ===
    # 请求频率和负载相关错误
    - "too_many_requests"       # 429 请求过多
    - "rate_limit_exceeded"     # 速率限制超出
    - "server_overloaded"       # 服务器过载
    - "temporary_unavailable"   # 临时不可用

    # === Stream传输错误 ===
    # 流式传输特定错误
    - "stream_interrupted"      # Stream传输中断
    - "stream_transmission_error" # Stream传输过程错误
    - "stream_format_error"     # Stream格式错误

    # === Provider特定错误 ===
    # 各Provider的特定临时错误
    - "没有可用token"           # Provider token不可用
    - "无可用模型"             # Provider模型不可用
    - "invalid_api_endpoint"    # API端点不支持
    
    # === 请求错误类型 ===
    # 通用请求错误
    - "invalid_request_error"   # 无效请求错误
    - "invalid_request"         # 无效请求
    
    # === 速率限制错误 ===  
    # 各种速率限制相关错误
    - "rate_limit"              # 速率限制
    - "rate_limit_exceeded"     # 速率限制超出（已重复，但保留完整性）
    
    # === 令牌相关错误 ===
    # 令牌不可用的各种表述
    - "no_available_token"      # 无可用令牌（英文）
    - "no_available_model"      # 无可用模型（英文）

  # HTTP状态码映射到failover错误
  failover_http_codes:
    - 402  # Payment Required
    - 404  # Not Found
    - 408  # Request Timeout
    - 500  # Internal Server Error
    - 502  # Bad Gateway
    - 503  # Service Unavailable
    - 504  # Gateway Timeout
    - 429  # Too Many Requests
    - 520  # Unknown Error (Cloudflare)
    - 521  # Web Server Is Down
    - 522  # Connection Timed Out
    - 523  # Origin Is Unreachable
    - 524  # A Timeout Occurred

  # 日志设置
  log_level: "INFO"  # DEBUG | INFO | WARNING | ERROR | CRITICAL
  log_color: true
  log_file_path: "logs/logs.jsonl"

  # 服务器配置
  host: "127.0.0.1"
  port: 9090

  # 应用信息
  app_name: "ClaudeCode Providers Balancer"
  app_version: "0.1.0"

  # OAuth Token持久化存储设置
  oauth:
    # 是否启用token持久化存储到系统密钥环
    enable_persistence: true
    # 系统密钥环服务名称
    service_name: "claude-code-balancer"
    # 是否启用access_token自动刷新(过期前5分钟自动刷新)
    # 只有在美国IP访问时才能成功
    # 代理设置
    proxy: "http://127.0.0.1:10808"
    enable_auto_refresh: true

  # 请求去重设置
  deduplication:
    # 是否启用请求去重
    enabled: true
    # 是否在签名计算中包含max_tokens参数
    # 设置为false可以避免Claude Code客户端重试时因max_tokens变化导致的签名不同
    include_max_tokens_in_signature: false
    # 响应缓存已删除，只保留去重功能

  # 测试设置（仅用于开发和测试）
  testing:
    # 是否启用模拟延迟（用于测试重试机制）
    simulate_delay: false
    # 模拟延迟时间（秒）- 设置为10秒，ClaudeCode客户端60秒超时
    delay_seconds: 10
    # 只对包含特定关键词的请求启用延迟（可选）
    delay_trigger_keywords: ["test", "延迟", "delay"]
